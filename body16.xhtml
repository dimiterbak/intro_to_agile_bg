<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xml:lang="en" lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
	<meta charset="utf-8"/>
	<title>Поток&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;</title>
	<link type="text/css" rel="stylesheet" href="css/stylesheet.css"/>
</head>
<body>

<p class="heading-page-padding"><br /></p>
<div class="heading">
<h2 class="title" id="doc91">ПОТОК</h2>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc92">ТЕЗИСИ</h4>

<ul>
<li>Капацитетът на системата е интензитета на излизане на изпълнение заявки. Търсенето е интензитета на влизане на нови чаявки. Коефициент за натоварване показва съотношението между товара и капацитета на една система.</li>
<li>Ако не можем да намалим времето за обслужване от сървъра то за да намалим цялото време за обработка трябва да намалим времето за чакане на опашка.</li>
<li>Колкото по-дълга е опашката толкова по-дълго се чака на нея.</li>
<li>Дължината на опашката и от там времето за чакане на опашката става безкрайно голямо ако системата е натоварена на 100%.</li>
<li>Опашка се образура когато търсенето е по-голямо от капацитета на системата.</li>
<li>Опашка се образува и когато сървърът е натоварен над 80% от капацитета си и няма неизпозван, свободен капацитет на системата.</li>
<li>Дължината на опашката на една система е обратно пропорционална на неизпозвания, свободен капацитет на системата</li>
<li>Опашка се образува и когато има вариация във времето между постъпването на две последователни заявки за работа.</li>
<li>Опашка се образува и когато има вариация във времето за обслужване от сървъра. Колкото повече варира времето за обслужване S толкова се увеличава дължината на опашката..</li>
<li>Опашка се образува и когато има вариация във капацитета на сървъра.</li>
<li>За да намалим времето за обработка то трябва да правим някаква комбинация от следните мерки:

<ul>
<li>Да намалим интензитета на влизане на нови заявки в системата.</li>
<li>Да увеличин интензитета μ на обработка с други думи да намалим времето за обслужване .</li>
<li>Да намалим дължината на опашката пред сървъра.</li>
<li>Да поддържаме 80-85% натоварване на системата.</li>
<li>Да се опитаме да намалим вариацията на времето за обслужване S.</li>
</ul></li>
<li>Ако имаме висока вариация на времето за обслужане, да се опитаме да поддържаме натоварване по-ниско от 85%.</li>
<li>Ако искаме да поддържаме висока степен на натоварване, да се опитаме да намалим вариацията на времето за обслужане.</li>
<li>Ако искаме да можем да отговорим бързо трябва да поддържаме буфер от неизползван капацитет.</li>
<li>Производителност на една система е максималният брой заявки, който системата може да обработи без да надхвърли максималното време на обработка, което потребителите могат да толерирарат.</li>
<li><p class="br"><br /></p></li>
</ul>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc93">ТЕОРИЯ НА МАСОВОТО ОБСЛУЖВАНЕ (ТМО)</h4>

<p>Теорията за масовото обслужване е математически метод основан от датският учен Ерланг в началото на XX в. ТМО описва природни ограничения, с които ние искаме или не трябва да се съобразяваме.</p>
<p class="br"><br /></p>

<p>Предмет на теорията са методите и средствата за изучаване и изследване на процесите на обслужване, протичащи ежедневно в обкръжаващата ни действителност, при които:</p>

<ul>
<li>през определени (постоянни) или неопределени (случайни) интервали от време постъпват заявки за обслужване.</li>
<li>протича процес на постоянно изпълнение на тези заявки, като времената за изпълнение имат еднаква или променлива продължителност.</li>
</ul>
<p class="br"><br /></p>

<p>Малко хора си дават сметка колко много ТМО е приложима в нашия живот. Задръстванията по улиците, опашките в магазина, чакането пред компютъра да се зареди любимия ни уебсайт - опашките са част от нашето всекидневие.</p>
<p class="br"><br /></p>

<p>Системите, които може да се моделират с помощта на ТМО се наричат системи за масово обслужване (СМО). Основните елементи на една система за масово обслужване са:</p>

<ul>
<li>заявка - всяко предявено искане за изпълнение на дадена работа</li>
<li>опашка - съвкупността от постъпилите заявки, които очакват да бъдат обслужени</li>
<li>входящ поток - съвкупността от чакащите за обслужване заявки</li>
<li>сървър (канал за обслужване) - съвкупността от технически средства и персонала, осъществяващи обслужването</li>
<li>изходящ поток - съвкупността от обслужените заявки</li>
</ul>
<p class="br"><br /></p>

<p>Тук имаме пример за СМО - хората плащат на касата в магазина .</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_1.png" alt="" id="qt_1" style="width:100%;" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Сървърния процес е касиера, който обслужва касата. Пред него има и опашка от четирима души чакащи да бъдат обслужени. Има човек, който влиза в опашката. Има човек, кйто е обслужван в момента. Има и човек, който вече е обслужен от касиера или с други думи е излязъл от системата.</p>
<p class="br"><br /></p>

<p>Една СМО се визуализира като сървърите се рисуват като кръгчета, опашките пред тях се рисуват като правоъгълници, потоците на влизане и излизане се отбелязават със стрелки..</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_2.png" alt="" id="qt_2" style="width:100%;" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_3.png" alt="" id="qt_3" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>На диаграмата са отбелязани няколко времеви интервала. Първият, означен с W показва колко време се чака на опашката. Вторият, пзначен с S показва колко време отнема на сървъра да обслужи една заявка. Сборът на тези две времена дава времето за обработка T, което показва колко време една заявка е прекарала в системата за да бъде обслужена . </p>
<p class="br"><br /></p>

<p>Може да имаме различни конфигурации от опашки и сървъри. Може да имаме един сървър с една опашка както в примера с касата в магазина.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_4.png" alt="" id="qt_4" style="width:100%;" /></div>
<p class="br"><br /></p>
<p class="ps4"> Конфигурацията с трите сървъра с една обща опашка, често се вижда по летишата, където има една голяма опашка и много гишета. Конфигурацията на един сървър с три опашки се използва в случаите, когато клиентите се разделят по приоритет още при влизането си в системата. Последната конфигурация е на две СМО, които образуват тандем.</p>
<p class="br"><br /></p>

<p>Най-важните параметри на една СМО са:</p>

<ul>
<li>Товар - това е среднният броя заявки влезли в системата за единица време. Мери се в бр/ед.време. Означава се с гръцката буква λ. Пример: λ = 10 клиента на минута</li>
<li>Капацитет - това е средният брой заявки обслужени за единица време. Мери се в бр/ед.време. Означава се с гръцката буква μ. Например: μ = 12 клиента на минута.</li>
<li>Коефициент на натоварване - представлява процента от времето, през което системата работи. Означава се с ρ и е равен на отношението между товара и капацитета. ρ= λ / μ. Мери се в проценти, например: ρ= λ / μ = 10/12 = 83%. Ако това съотношение е по-голямо от 1, това означава, че заявките пристигат по-бързо, отколкото могат да бъдат обслужвани, и така опашката пред сървъра ще расте без ограничение. Ако съотношението е по-малко от 1, опашката пред сървъра ще достигне средно стабилно състояние.</li>
<li>Време за чакане - това е периодът между момента на постъпване на заявката в опашката до началото на обслужването. Означава се с булвата W. Например W = 3 минути.</li>
<li>Време за обслужване - това е времето от началото на обслужването до неговото завършване. Означава се с буквата S. Пример. S = 2 минути на клиент.</li>
<li>Време за обработка - това е периодът, включващ чакането W и обслужването S, с други думи времето за обработка e T = W + S . Например: Т = W + S = 3 + 2 = 5 минути.</li>
<li>Дължина на опашката - това е броят заявки, които изчакват да започнат да бъдат обслужени или се обслужват от сървъра. Означава се с булвата L. Например L=10 клиента.</li>
<li><p class="br"><br /></p></li>
</ul>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc94">ЗАЩО СЕ ОБРАЗУВАТ ОПАШКИ?</h4>
<p class="ps4">Това може да изглежда като реторичен въпрос с ясен отговор: тъй има повече работа, отколкото сървърът може да обслужи! Това е и първата причина за образуване на опашка.</p>
<p class="br"><br /></p>
<p class="centered-text">Първата причина за образуване на опашка е, когато търсенето е по-голямо от капацитета на системата.</p>
<p class="br"><br /></p>
<p class="ps4">Нека първо разгледаме как капацитета на една система влияе на образуването на опашка. Тук е показана система, която обработва коли - те трябва да преминат през един светофар в далечината. Тоест - колите са заявките за изпълнение, светофара е сървъра. Кое е опашката? Шосето е опашката.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_5.png" alt="" id="qt_5" /></div>
<p class="br"><br /></p>

<p>Отляво системата е доста натоварена. Отдясно системата не е натоварена. </p>
<p class="br"><br /></p>

<p>Коефициентът на натоварване ρ зависи от товара λ и капацитета μ и показва съотношението между търсенето и капацитета на една система т.е. ρ= λ / μ.</p>
<p class="br"><br /></p>

<p>Има три основни случая:</p>

<ul>
<li>Коефициентът на натоварване да е по-малък от 100%. Например, ако товара е 10 коли/час, капацитета е 30 коли/час то ρ = λ /μ = 10 / 30 = 0.33. Системата е натоварена на 33% от капацитета си.</li>
<li>Коефициентът на натоварване да е 100%. Например, ако товара е 30 коли/час, капацитета е 30 коли/час то ρ = λ /μ = 30 / 30 = 1. . Системата е натоварена на 100% от капацитета си.</li>
<li>Коефициентът на натоварване да е по-голям от 100%. Например, ако товара е 60 коли/час, капацитета е 30 коли/час то ρ = λ /μ = 60 / 30 = 2. . Системата е натоварена на 200% от капацитета си, тоест е претоварена.</li>
</ul>
<p class="br"><br /></p>

<p>Това разбира се и децата го знаят!</p>
<p class="br"><br /></p>

<p>Така, е но ТМО ни казва и неща, които децата не знаят - например, че опашка се натрупва дори когато сървърът има достатъчно капацитет за изпълнение на работата. Това е нещо наистина изненадващо и неинтуитивно и е толкова важно, че е необходимо да се подчертае. </p>
<p class="br"><br /></p>
<p class="ps4"><span class="emphasis">Опашка се образува дори когато сървърът има достатъчен капацитет да свърши работата.</span></p>
<p class="br"><br /></p>

<p>Ще разгледаме четири причини за това.</p>
<p class="br"><br /></p>
<p class="centered-text">Втората причина за образуването на опащка е вариация в капацитета на сървъра</p>
<p class="br"><br /></p>

<p>Нека вземем като пример за вариация на капацитета на сървъра един път със светофар, който има зелена, жълта и червена светлина. В случаят светофара се явява сървъра на системата. </p>

<p>Светофара свети зелено в продължение на 1 минута и свети червено в продължение на половин минута. Ще опростим, като приемем, че жълтата светлина свети за пренебрежимо кратно време. На долната диаграма сме показали как се променя капацитета на системата.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_6.png" alt="" id="qt_6" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Товарът ( средното темпо на влизане на коли) е стабилно и равно на 10 коли на минута. Капацитета на сървъра (светофара) обаче не е константен. Капацитета е нула, когато светофара свети червено. Капацитета е равен на товара, когато светофара свеети зелено. Можем лесно да сметнем, че капацитета е равен на 20 коли за 3 минути или 6,7 коли за минута.</p>

<p>Образуването на опашката може да се визиулизира с помощта на кумулативна диаграма на потока (КДП). На една КПД по абцисата имаме хронологично време, като точките отдясно са се случили след точките отляво. По ординатата имаме кумулативният брой заявки - в случая това са коли, влезли и излезли от системата. На долната КПД виждаме как се отразява светофара на капацитете на системата.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_7.png" alt="" id="qt_7" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Графиката започва от момента в който светофара светне червено. По време на червения период от 0,5 минути капацитета на сървъра (светофара) е нула, така че представяме темпото на излизане като хоризонтална линия по абцисата. Темпото на влизане на коли е представено с прекъснатата линия, започваща от нулата. Тъй като светофарът е червен пристигащите коли образуват опашка. Опашката се визузлизира като вертикалната разлика между прекъснатата линия на влизането и непрекъснатата линия на излизането. </p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_8.png" alt="" id="qt_8" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Разликата по вертикала между линиите на влизане и излизане ни показва дължината на опашката (L) в даден момент. Например, във втората минута, дължината на опашката (L) е равна на 10 коли. В началото на зеления период капацитета рязко става равен на товара. Както е показано на фигурата, до края на зеления период кумулативната линия на влизане е успоредна на кумулативната линия за излизане. Опашката обаче не изчезва, защото капацитета е равен на товара. Ако капацитета беше по-голям от товара, то опашката щеше да изчезне. След това светва червеното и цикълът се повтаря, като капацитета на сървъра става отново нула.</p>
<p class="br"><br /></p>

<p>От една КДП визуално може да определим и средното време за обработка (T) на една заявка. Това е разликато по хоризонтала между линията на влизане и линията на излизане от системата. В случаят, средното време за обработка (T) е развно на 0,5 минути, но със всяко светване на червената светлина, то се увеличава със 0,5 минути. Виждаме, че когато дължината на опашката се увеличава то и времето за обработка се увеличава. </p>
<p class="br"><br /></p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_9.png" alt="" id="qt_9" style="width:100%;" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>От тази КДП виждаме, че имаме задръстване, ако темпото на пристигане е по-голям от темпото на напускане т.е. ако товара е по-голямо от капацитета на системата. С други думи - ако пристигат повече коли, отколкото може да се обслужат от светофара, ще се получи задръстване.</p>
<p class="br"><br /></p>

<p>Освен капацитета на сървъра за образуването на опашка влияние имат вариацията в системата, натоварването и времето за обслужване от сървъра. Това е открито от Джон Кингман, британски професор, известен, наред с други неща, с приноса си към ТМО. През 1961 г., когато подготвя докторската си дисертация, той публикува статия в която представя формула, известна като формулата на Кингман [kingman_single_1961]. За да запомним по-лесно формулата на Кингман предлагам да ползваме следната форма:</p>
<p class="br"><br /></p>
<p class="centered-text"><span class="emphasis">W = VUS</span></p>
<p class="br"><br /></p>

<p>където:</p>

<ul>
<li>W е средното време за чакане на опашката пред сървъра</li>
<li>V е вариацията като комбинация от:

<ul>
<li>вариацията във времето между постъпването на две последователни заявки за работа и</li>
<li>вариацията във времето за обслужване на една заявка от сървъра;</li>
</ul></li>
<li>U е коефицентът на натоварване (утилизацията на сървъра);</li>
<li>S е средното време за обслужване от сървъра.</li>
</ul>
<p class="br"><br /></p>

<p>От фирмулата се вижда, че за да намалим времето за чакане на опашка трябва да намалим всеки един от трите параметъра.</p>

<p>Сега ще разгледаме подробно всеки един от тези фактори за образуване на опашка.</p>
<p class="centered-text"><br /></p>
<p class="caption">Третата причина за образуването на опащка е липса на неизпозван, свободен капацитет в системата</p>
<p class="br"><br /></p>

<p>Формулата на Кингман ни казва, че колкото повече е използван сървъра толкова се увеличава и времето за чакане на опашка. Под използване се има предвид сървъра да работи без да спира.</p>

<p>Тук е показана графичната зависимост между коефицента на натоварване и средното време за чакане (W). То е също така, пропорционално ка дължината на опашката пред сървъра.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_10.png" alt="" id="qt_10" style="width:100%;" /></div>

<p>По абцисата имаме коефицента на натоварване на сървъра в проценти. По ординатата имаме средното време за чакане (W).</p>

<p>Виждаме, че ако коефицента на натоварване ρ на една система е по-малък от 80% то средното време за чакане (W) се увеличава линейно. Линейно увеличение означава, че ако с 10% увеличим товара, то приблизително с 10% ще се увеличи и средното време за чакане (W). Ако обаче коефицента натоварването стане по-голям от 80% то средното време за чакане (W) се увеличава експоненциално. Експоенцилно означава, че ако с 10% увеличим коефицента на натоварване, то средното време за чакане (W) ще се увеличи двойно с 20%. От диаграмата виждаме, че средното време за чакане (W) става безкрайно голямо ако системата е натоварена на 100%!</p>

<p>Можем да обобщим, че дължината на опашката и средното време за чакане (W) на една система е обратно пропорционална на неизпозвания, свободен капацитет на системата. </p>
<p class="br"><br /></p>
<p class="caption">Четвъртата причина за образуването на опащки е вариацията във времето между постъпването на две последователни заявки за работа.</p>
<p class="br"><br /></p>

<p>Освен от натоварването дължината на опашката зависи и от вариацията във времето между постъпването на две последователни заявки за работа. </p>

<p>Например, купувачите не пристигат на касата за плащане по график. Понякога пристигат няколко клиента едновременно.</p>
<p class="br"><br /></p>

<p>Долу на диаграмата е показано вариращо време между постъпването на две последователни заявки за работа. </p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_11.png" alt="" id="qt_11" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Темпото на влизане на нови заявки е показано като прекъснатата линия. Плътната линия показва темпото μ на излизане. Двете линии са успоредни т.е. колкото заявки средно на ден влизат толкова и средно на ден излизат. От диаграмата се вижда, че в ден 21 в системата наведнъж влизат 10 нови заявки. Следователно дължината на опашката се увеличава от 5 на 15 заявки. Това е показано на диаграмата като прекъснатата линия се отмества нагоре. Темпото на влизане и темпото на излизане се запазват и линиите им са все така успредни. </p>

<p>Новите 10 заявки са наредени на опашката да чакат обслужване. Как ли ще се отрази това на средното време за чакане (W)? То ще се увеличи.</p>
<p class="br"><br /></p>

<p>Понякога минава известно време до следващият клиент и сървъра стои бездеен. Това е показано на долната графика. Дневният товар варира и в периодите A и C е по-малко от наличният капацитет.</p>
<div class="ps3"><img src="images/QT_12.png" alt="" id="qt_12" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Може би клиентът е трябвало да пристигне по-рано, но е загубил времето да прави нещо друго, докато касиерът е бил свободен? Когато касиерът е свободен, капацитета му се губи и никога не може да се възстанови, защото касиерът не може да бъде повече от 100% натоварен. Изгубеното време никога не може да бъде възстановено. Опашката става постоянна и в резултат обслужването се забавя за постоянно.</p>
<p class="br"><br /></p>
<p class="centered-text">Петата причина за образуването на опащки е вариацията във времето за обслужване от сървъра.</p>
<p class="br"><br /></p>

<p>Възможно е обслужването на някои от клиентите да отнеме много повече време отколкото на други. Клиентите образуват опащка, защото предишните клиенти не са имали време да им приключи обслужването. И когато това се случи, тогава новите клиенти ще зачакат на опашката. </p>
<p class="br"><br /></p>

<p>ТМО ни казва, че колкото повече варира времето за обслужване S толкова се увеличава дължината на опашката и отттам средното време за чакане (W).</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_13.png" alt="" id="qt_13" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Диаграмата горе показва тази връзка. По абцисата имаме вариацията на времето за обслужване S от 0% до 250% спрямо средната му стойност. Можем ясно да видим как с увеличението на вариацията се увеличава и средното време за чакане (W) на опашката пред сървъра.</p>
<p class="br"><br /></p>
<p class="centered-text">Едновременно влияние на всички параметри</p>
<p class="br"><br /></p>

<p>Kак се отразява на дължината на опашката пред сървъра едновременното наличие и на натоварване над 80% и на вариация във времето между две заявки и на вариация във времето за обслужването? Става по-лошо, защото ефектите им от не се събират ами се умножават!</p>

<p>Следствието е, че системата се затлачва при коефицент на натоварване по-нисък от 80%!</p>
<p class="br"><br /></p>

<p>Това е показано на долната диаграма, където линията със точки е малка вариация, прекъснатата линия е по-голяма вариация, а линията със точки и черти е огромна вариация. Вижда се, че вариацията “дърпа” наляво кривата на веремето за чакане.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_14.png" alt="" id="qt_14" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Нека да обобщим, че основните причини за образуване на опашки са:</p>

<ul>
<li>Товарът е по-голямо от капацитета на сървъра.</li>
<li>Променлив капацитет на сървъра.</li>
<li>Сървърът е натоварен над 80% от капацитета си.</li>
<li>Променливи времена между постъпването на две последователни заявки.</li>
<li>Променливи времена на обслужване от сървъра.</li>
<li><p class="br"><br /></p></li>
</ul>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc95">ЗАКОН НА ЛИТЪЛ</h4>

<p>Зависмостта между товара λ, усреднения за определено време брой заявки в системата L и средното време Т за обработка се описва от една теорема наречена “Закон на Литъл”[little_forum_2011]. Законът на Литъл се прилага като разглеждаме всяка системата като “черна кутия”, както е показано долу на диаграмата.. Не се интересуваме от това какво става вътре в черната кутия, а само от това което се вижда отвън,</p>
<p class="br"><br /></p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_26.png" alt="" id="qt_26" /></div>
<p class="br"><br /></p>

<p>Законът на Литъл казва, че средният брой заявки в системата L е равен на капацитета <span class="emphasis">λ</span> умножен по средното време за обработка T.</p>
<p class="br"><br /></p>
<p class="centered-text"><span class="emphasis">L = λT</span></p>
<p class="br"><br /></p>

<p>Много често ние не се интересуваме от товара <span class="emphasis">λ</span>, ами от капацитета μ. За да използваме закона на Литъл с капацитет трябва товара <span class="emphasis">λ</span> да е равен на капацитета μ. Това се получава ако:</p>

<ul>
<li>системата е балансирана, тоест колкото заявки влизат толкова и да излизат</li>
<li>системата е празна в началото и краят на периодът на измерване</li>
</ul>

<p>Ако е изпълнено едно от горните две условия, то законът на Литъл казва, че средният брой заявки в системата L е равен на капацитета μ умножен по средното време за обработка T.</p>
<p class="br"><br /></p>
<p class="centered-text"><span class="emphasis">L = </span>μ<span class="emphasis">T</span></p>
<p class="br"><br /></p>

<p>Законът на Литъл ни дава възможност да изчислим един от трите му параметъра стига да знаем другите два. Законът на Литъл може да се прилага за всяка система, както и за отделни подсистеми на дадена система. Важното е стойностите на всички параметри ( капацитета μ, средният брой заявки в системата L и средното време Т за обработка) да бъдат изчислени за един и същ период от време. </p>

<p>Как се използва това на практика? </p>
<p class="br"><br /></p>

<p>За пример, да вземем кафене, в което сървъра се представлява от баристата, а пред нея е опашката от клиенти. Всяка една от системите, които ще разгледаме е дадена с прекъсната линия. </p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_27.png" alt="" id="qt_27" style="width:100%;" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Подсистемата с номер 1 е може би най-трудно доловима, защото тя включва само кафемашината като сървър, но без баристата и опашката пред нея. </p>
<p class="br"><br /></p>
<div class="ps3"><img src="images/QT_28.png" alt="" id="qt_28" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Тук параметърът “среден брой заявки L в системата“ се отнася само за кафетата, която кафемашината приготвя в даден момент. Следователно L съответства на коефицирнта на натоварване на сървъра ρ. Това е така, зашото:</p>

<ul>
<li>имаме нула или една задача изпълнявана от сървъра в даден момент от времето.</li>
<li>сървъра се използва когато има една задача за изпълнение,</li>
<li>натоварването на сървъра е равна на пропорцията от времето, в което има една задача за изпъленение, което от своя страна е равно на средният брой заявки в сървъра</li>
</ul>

<p>Капацитета μ е средния брой кафета приготвени за единица време. Тъй като кафемашината приготвя най-много по едно кафе в даден момент., то <span class="emphasis">λ</span> = μ. Средното време за приготвянето на едно кафе е само времето в сървъра S, без да се включва времето за чакане на опашката W.</p>

<p>От производителя на кафемашината имаме следните данни:</p>

<ul>
<li>Номиналният капацитет на кафемапината е 5 кафета за 4 минути, т.е. μ = 5 кафета/4 мин, което прави средно по 1,25 кафета на минута.</li>
<li>Машината може да прави само по едно кафе в даден момент, т.е. L = 1.</li>
</ul>

<p>Използвайки законът на Литъл можем да изчислим, че средното време за приготвяне на едно кафе е S = L /<span class="emphasis">λ = 1 кафе </span>в даден момент <span class="emphasis">делено на </span> 1,35 кафета на минута = 1 / 1,25 = 0,8 минути зсредно за приготвянето на едно кафе.</p>

<p>Когато има само една заявка в системата, т.е. L = 1,, то следва, че S = 1 /<span class="emphasis">λ и съответно λ</span> = 1 /S<span class="emphasis">. </span></p>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Подсистема номер 2 е баристата заедно със кафемашината, но без опашката пред нея. </p>
<p class="br"><br /></p>
<div class="ps3"><img src="images/QT_29.png" alt="" id="qt_29" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Тук параметърът “среден брой заявки L в системата“ се отнася само за клиентите, която баристата обслужва в даден момент. Както се вижда ние сменихме от кафета на клиенти. Товарът <span class="emphasis">λ е </span>среднния броя клиенти влезли в системата за единица време. Капацитета μ е средният брой клиенти обслужени за единица време. Средното време за обслужването на един клиент е само времето в сървъра S, без да се включва времето за чакане на опашката W.</p>

<p>Да кажем, че можем да наблюдаваме производителността на баристата. Пускаме хронометър и започваме измерването. Резултатът от измерването е:</p>

<ul>
<li>Чвтири клиента са обслужени за 4 минути. Значи товара <span class="emphasis">λ</span> = μ = 4 клиента/4 мин, което прави средно 1 клиент на минута.</li>
<li>Баристата обслужва по един клиент във даден момент т.е. L = 1 клиент.</li>
</ul>

<p>Използвайки законът на Литъл можем да изчислим, че средното време за обслужването на един клиент е S = L /<span class="emphasis">λ = 1 / 1 = </span> 1 минута средно за обслужването на един клиент. </p>
<p class="br"><br /></p>

<p>Подсистемата с номер 3 е баристата заедно с опашката пред нея. </p>
<p class="br"><br /></p>
<div class="ps3"><img src="images/QT_30.png" alt="" id="qt_30" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Тук параметърът “среден брой заявки L в системата“ съответства на клиентите, които са или на опашката или се обслужват от баристата. Товарът <span class="emphasis">λ е</span> среднния броя клиенти влезли в системата за единица време. Капацитетът μ е пак средният брой клиенти обслужени за минута.. Средното време Т за обслужване на един клиент вече включва времето на обслужване от сървъра плюс времето за чакане на опашката т.е. T = W + S. </p>

<p>Започваме измерването. Виждаме, че в самото начлов идват 4 клиента и се нареждат на опашка пред баристата. Това е допустимо, защото дължината на опашката не е ограничена. Баристата обслужва клиентите един по един. Резултатът от измерването е:</p>

<ul>
<li>Товарът <span class="emphasis">λ </span>= μ = 4 клиента/4 мин, което прави средно 1 клиент на минута.</li>
<li>Средното време Т за обслужването на един клиент T е 2,5 минути.</li>
</ul>

<p>Използвайки законът на Литъл можем да изчислим средния брой клиенти в системата L = <span class="emphasis">λ</span> T = 1 клиент на минута по 2,5 минути=2,5 клиента средно чакат на опашката или биват обслужвани..</p>
<p class="br"><br /></p>

<p>Сега вече можем да изчислим и средното време прекарано от един клиент чакайки на опашката. От тези 2,5 клиента един бива обслужван от баристата. Следователно (2,5 - 1) прави средно 1,5 клиента средно чакат на опашката. Използвайки W = L /<span class="emphasis">λ = 1,5 / 1 = 1,5 </span>минути е средното време за чакане на опашката пред баристата. </p>

<p>Можем да изчислим същото и по друг начин. От предното изчисление знаем, че S = 1 минута и следователно можем да презметнем средното време за чакане на опашката пред баристата W = T - S = 2,5 - 1 = 1,5 минути.</p>
<p class="br"><br /></p>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc96">ПРИЛОЖЕНИЕ НА ЗАКОНА НА ЛИТЪЛ</h4>

<p>Само два от трите параметъра на закона на Литъл могат да се използват за задаване на стратегия. Третият се пресмята.</p>
<p class="br"><br /></p>
<p class="centered-text"><span class="emphasis">L = λT</span></p>
<p class="br"><br /></p>

<p>Наприер, ако <span class="emphasis">λ</span> е прогнозираното търсене от клиентите, а <span class="emphasis">T </span>е целта, то <span class="emphasis">L </span>е начинът по който да се постигне целта като се удовлетвари търсенето.</p>
<p class="br"><br /></p>

<p>Товарът λ представлява преспективата на сървъра, който обикновенно са служителите работещи в системата. Служителите не искат да са претоварени, т.е. Да идва повече работа отколкото е капацитета им.</p>

<p>Средният брой клиенти в сстемата L представлява преспективата на мениджърите на системата. От гледна точка на бизнеса, клиентите влизат в системата и от всеки от тях се всемат 1лв/час за времето, което прекара вътре. Тогава е ясно, че L = λT е темпото с което системата генерира пари.</p>

<p>Средното време за обработка T представлява преспективата на клиентите на системата. Клиентите се интересуват колко бързо ще бъдат обслужени.</p>
<p class="verse"><br /></p>
<p class="verse"><br /></p>
<p class="verse"><br /></p>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc97">ПРОИЗВОДИТЕЛНОСТ</h4>

<p>Да предположим, че собственикът на кафенето иска “клиентите да бъдат обслужвани по-бързо”. Той е забелязал, че има моменти когато баристата не прави нищо докато чака машината да направи кафето. Това си е загуба на капацитет, мисли си собственика! И казва на баристата да започне да обслужва по два клиента едновременно. Докато чака машината за кафето на първият ще може да вземе поръчката на втория. </p>

<p>Какво ще стане ако баристата наистина започне да обслужва едновреенно по двама клиенти? </p>

<p>Тогава резултатът от измерването трябва да е:</p>

<ul>
<li>Пет клиента са обслужени за 4 минути. Значи товара <span class="emphasis">λ</span> = 5 клиента/4 мин, което прави средно 1,25 клиента на минута.</li>
<li>Баристата обслужва по два клиент във даден момент т.е. L = 2</li>
</ul>

<p>Използвайки законът на Литъл можем да изчислим средното време за обслужването на един клиент S = L / <span class="emphasis">λ </span>= 2 клиента / 1,25 клиент на минута = 1,6 минути средно на клиент. </p>

<p>Нека сравним с пъроначалното положение, когато баристата обслужваше по един клиент с текущото, когато обслужва по два клиента едновременно. Виждаме, че средното време за обслужване се е увеличило с 60% от 1 на 1,6 минути. Обслужени са пет клиента т.е. има увеличение с 25% Увеличен е броя на обслужените клиенти за сметка на индивидуалното време за обслужване.</p>

<p><span style="background-color: #FFFB7F">Дали увеличението на капацитета за сметка на увеличаване времето за обслужване е добро? Това зависи от природата на всеки един бизнес. За нас е важно, да знаем че има зависимост вежду двете. И тя се управлява чрез средният брой заявки L в системата. </span>Нашият естествен човешки инстинкт ни кара да правим много неща едновременно. Ако целта ни е заявките да се обработват максимално бързо, то трябва да ограничим броят на нещата, по които работим едновременно. </p>
<p class="br"><br /></p>

<p>Изводът е, че трябва да внимаваме с описанието на това което искаме да постигнем. Изразът “клиентите да се обслужват по-бързо” може да осначава две неща. Първото е: средното време за обслужване на един клиент да намалее. Второто е: да обслужваме повече клиенти за единица време. </p>
<p class="br"><br /></p>

<p>Важно е да отбележим, че увеличението на капацитета не се вижда от отделният клиент. Вижда се от бизнеса като цяло. От друга страна увеличението на средното време за обслужване на един клиент не се вижда от бизнеса. Вижда се от клиента индивидуално.</p>
<p class="br"><br /></p>

<p>Когато става въпрос за производителност на една система, ние искаме две неща:</p>
<p class="br"><br /></p>

<ul>
<li>Най-бързото възможно време Т за обработка на една заявка, което можем да получим - защото никой не иска да чака прекалено дълго, за да му се свърши работата.</li>
<li>Най-голямият възможен капацитет μ, която можем да получим т.е. искаме да можем на колкото се може повече клиенти да изпълним зявките.</li>
</ul>
<p class="br"><br /></p>

<p>За съжаление, както видяхме от зависимостта между коефицента на натоварвването ρ и времето за обработка Т, тези две цели си противоречат. Оптимизирането за първата цел изисква да се намали натоварването ρ на системата ви; а оптимизирането за втората цел изисква да го максимизираме!</p>

<p>Не можем да правим и двете едновременно. Някъде по средата - при някакво ниво на натоварване ρ, е оптималният товар λ за системата.</p>
<p class="br"><br /></p>

<p>Коефицента на натоварване ρ на една СМО, при който се постига това оптимално равновесие, е точката, в която производителността се увеличава с минимално отрицателно въздействие върху времето за обработка Т. </p>
<p class="br"><br /></p>

<p>Математически това е коефицента на натоварване ρ, на който ако разделим времето за обработка Т се пулучава минимална стойност т.е. Т/ρ да е минимално. </p>

<p>От тук получаваме и определението за производителнот на една система.</p>
<p class="br"><br /></p>

<p><span class="emphasis">Производителност на една система е максималният брой заявки λ, който системата може да обработи без да надхвърли максималното време на обработка Т, което потребителите могат да толерират.</span></p>
<p class="br"><br /></p>

<p>На диаграмата долу сме дали Tmax=10 като максималното време на обработка Т, което един потребител може да толерира. От своя страна максималният товар в случаят е 30 заявки за единица време.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_16.png" alt="" id="qt_16" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Тук трябва да отбележим, че по абцисата сме дали товара λ, а не коефицента на наоварване ρ, защото всремето за обслужване S е константно. Тъй като ρ = λ /μ, при константно μ следва, че ρ е пропорционално на λ.</p>

<p>Проблемът е, че потребителите обикновено нямат толеранс към средното време за обработка - това, което те наистина имат предвид под толеранс е най-лошия случай на време за обработка. Затова когато кажем &quot;толерантност&quot; ние имаме предвид максималната, а не средната стойност на времето за обработка!.</p>
<p class="br"><br /></p>
<p class="br"><br /></p>
<p class="br"><br /></p>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc98">ОПАШКИТЕ СА ВОДЕЩ ИНДИКАТОР</h4>
<p class="br"><br /></p>

<p>Как може една КДП да се използва на практика?</p>

<p>Долната диаграма представлява една КДП. Времето по адцисата е в дни - 1-ви,6-ти,21-ви ден и т.н.</p>
<p class="br"><br /></p>
<p class="br"><br /></p>
<div class="ps3"><img src="images/PastedGraphic28.png" alt="" id="pastedgraphic28" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Товара (интензитетът на влизане λ на нови заявки) е показано като светлосинята линия. От графиката се вижда, че о 21-вия ден имаме общо влезли 10 заявки. Значи товарът е 5/10 = 0,5 заявки/ден,. Тъмносинята линия показва производителността (интензитета μ на излизане) на системата. За 10 дни (от 11 до 21-вият ден) са изпълнение общо 5 заявки Това значи, че производителността е около 5/10 = 0,5 заявки/ден. Двете линии са успоредни - колкото заявки средно на ден влизат толкова и средно на ден излизат. Ако приемем, че системата работи на 100% от капацитета си, то значи капацитета и е 9,5 заявки на ден</p>
<p class="br"><br /></p>

<p>Рзликата между двете лини по хоризинтала е средното време за обработка. Виждаме, че до 21-вият ден средното време за обработка е било 11 дни. Разликата между двете лини по вертикала показва по колко заявки системаат е работили едновременно (WIP). Визуално изглежда да е около 5 заявки. Тъй като знаем, че LT = 11 дни и TH = 0,5 заявки на ден, то използвайки закона на Литъл можем да пресметнем, че WIP = TH x LT = 0,5 x 11 = 5,5 заявки.</p>
<p class="br"><br /></p>

<p>От диаграмата се вижда, че в ден 21 в системата е добавила 10 нови заявки към заявките, които едновременно изпълнява. Следователно WIP става от 5,5 на 15,5 заявки. Това е показано на диаграмата като светлосинята линия се отмества нагоре. Товарът (интензитите на влизане) и производителността (интензитите на излизане от системата) се запазват и линиите им са все така успредни. </p>

<p>Тъй като системата работи на 100% от капацитета си и производителността остава 0,5 заявки/ден, то новите 10 завки ще се наредят на опашка да чакат обслужване. Как ли ще се отрази това на средното време за обработка на една заявка?</p>
<p class="br"><br /></p>

<p>Само гледайки двете линие, може да направим прогноза, че след 30 дена ( в ден 51) средното време за обработка ще се утрои от 11 на 30 дни. Без никакви сметки - само от диаграмата.</p>

<p>Увеличението на времето за обработка е само защото сме увеличили броят на заявките, които системата обработва едновременно!</p>
<p class="br"><br /></p>

<p>Таз сметка можем да я потеърдим със закона на Литъл. WIP е увеличено на 17,5 заявки като TH ne e promeneno. Затова LT = WIP/TH = 15,5/0,5 = 31 дни.</p>
<p class="br"><br /></p>

<p>Виждаме, че ако сме запознати с ТМО то още в момента в който WIP се увеличи можем да кажем колко ще се увеличи средното време за обработка.</p>

<p>Това, ни показва, че WIP (броят заявки, по които се работи едновременно) може да ни служи за водещ индикатор за промяна на времето за обработка и от там за производителността на системата.</p>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc99">КАК ДА НАМАЛИМ ВРЕМЕТО ЗА ОБРАБОТКА?</h4>

<p>Нека пак погледнем нашата система, която обработва коли. Видяхме, че отляво системата е доста натоварена, а отдясно системата не е натоварена. Къде реално скоростта е по-голяма? В коя система ще минат повече коли за единица време?</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT.png" alt="" id="qt" /></div>
<p class="br"><br /></p>

<p>Вдясно тъй като опашката е по-малка, то за единица време ще мнат повече коли през шосето (сървъра).</p>
<p class="br"><br /></p>

<p>Това е ясно но все пак да го повторим - колкото по-дълга е опашката толкова по-дълго се чака на нея.</p>
<p class="br"><br /></p>

<p>Горното твърдение може да се покаже и математически. Нека си припомним, че времето за обработка Т е равно на времето за обслужване плюс времето за чакане на опашката пред сървъра, или Т = S + W. Ако приемем, че не можем да намалим времето за обслужване от сървъра то за да намалим цялото време за обработка трябва да намалим времето за чакане на опашка.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_15.png" alt="" id="qt_15" style="width:100%;" /></div>
<p class="br"><br /></p>

<p>Прекъснатата линия в тази диаграма е времето за обслужване S, което е минималното време, за моето една заявка ще бъде обработена. Времето за обслужване не зависи от натоварването., обаче времето за обработка деградира при големи натоварвания на системата.</p>

<p>Дори и с нулево чакане W времето за обслужване T отнема известно време. Времето за изчакване в опашката W е отговорно за изкривената като хокеен стик графика. С други думи - дължината на опашката и от там времето за чакане на опашката става безкрайно голямо ако системата е натоварена на 100%.</p>
<p class="br"><br /></p>

<p>Следователно, ако искаме за да намалим времето за обработка T то трябва да използваме комбинация от следните мерки:</p>
<p class="br"><br /></p>

<ul>
<li><p>Да намалим темпото λ на влизане на нови заявки в системата. Това се прави например чрез промени в графика на работното време на СМО, чрез удължаване на работното и време, инсталиране на помощна система за обслужване, която да отклони част от заявките и др.</p></li>
<li><p>Да увеличин темпото μ на излизане с други думи да намалим времето за обслужване S. Това се прави като забързаме сървъра т.е подобрим на организацията на труда, осигурим работните места с високопроизводително оборудване, повишим на квалификацията и производителността на персонала, осъществяващ обслужването, вземане на решение за отваряне на нови канали (уширяване на пътищата) и нови сървъри т.е. назначаване на хора.</p></li>
<li><p>Да намалим дължината на опашката L пред сървъра - например, като не допускаме нови клиенти да застанат на опашка. </p></li>
<li><p>Да поддържаме 80-85% натоварване на системата ρ. </p></li>
</ul>

<p>Колкото по-ниско е натоварването, толкова по-кратко е времето за обработка T. Разбира се, по-голямото натоварване означава и по-добро използване на инвестирания капитал. Тук трябва да направим компромис между комбинациите от а) дълго време за обработка и висока степен на оползотворяване на нашите ресурси и б) кратко време на обработка с ниска степен на оползотворяване на нашите ресурси.</p>

<ul>
<li><p>Да се опитаме да намалим вариацията на времето за обслужване S. </p></li>
<li><p>Ако имаме висока вариация на времето за обслужване S, да се опитаме да поддържаме натоварване по-ниско т 85%, например 50-60%. Това е много трудно обяснимо на хора незапознати със ТМО. </p></li>
<li><p>Ако искаме да поддържаме висока степен на натоварване ρ, да се опитаме да намалим вариацията на времето за обслужане S. </p></li>
</ul>
<p class="br"><br /></p>
<p class="br"><br /></p>
<p class="br"><br /></p>
<p class="br"><br /></p>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc100">МАЩАБИРУЕМОСТ</h4>

<p>Мащабируемост значи производителнистта да се променя в зависимост от броят сървъри в системата.</p>

<p>В идеалният случай мащабируемостта на една система е линейна. Това означава да има линейна зависимост между броя на сървърите в системата и нейният капацитет μ .</p>

<p>Една от най-големите пречки пред прилагането на модели базирани на ТМО (независимо дали аналитични или симулационни) е непознаването на времената на обслужване в рамките на системата. Всяка формула от ТМО изисква времето за обслужване като входен параметър. USL прескача целия този проблем, като не изисква никакви измервания на времето за обслужване на ниско ниво като като входен параметър.</p>
<p class="br"><br /></p>

<p>Да предположим, че една система с един сървър може да изпълни 3 заявки за три дена т.е. средно 1 заявка/ден.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_17.png" alt="" id="qt_17" /></div>
<p class="br"><br /></p>

<p>Нека към единият сървър добавим още два за да станат три. Тогава системата ще може да изпълни трите заявки в паралел и съответно повече заявки на ден. Ако времето за обработка от всеки един сървър е 1 ден, то капацитета на системата ще е 3 заявки/ден..</p>
<p class="br"><br /></p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_18.png" alt="" id="qt_18" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Увеличавайки три пъти броят на сървърите постигнахме трикратно увеличение на капацитета от 1 заявка/ден на 3 заявки/ден. В този случай капацитета се е увеличил линейно с добавянето на нови сървъри.. </p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_19.png" alt="" id="qt_19" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Има една математическа формула наречена Универсален закон на мащабируемостта (USL), който обяснява как се величава производителността при добавянето на нови сървъри[gunther_guerrilla_2007].</p>

<p>USL се използва за описване на множество паралелни системи, включително микропроцесори, клъстери от компютри и др. Като всяка формула с широко поле на приложимост, USL изкушава, че може да бъде полезен за описване на по-малко числово измерими явления. Като менидгмънта! Закони като USL хвърлят светлина върху начина, по който хората можем да управляваме задачите си както самостоятелно, така и като част от екип.</p>

<p>Нека вземем за пример как рестежа на една организация се отрачява на капацитета и. В идеалният случай, добавяйки нови хора към организацията трябва да доведе до линейно увеличение на нейният капацитет.</p>

<p>За съжаление, опита показва, че най-често с увеличението на броят на хората в една организация производителността не се увеличава ами даже намалява. Според USL причините са в съперничеството и съгласуваността в една система</p>
<p class="br"><br /></p>
<p class="centered-text">Съперничество</p>
<p class="br"><br /></p>

<p>Нека първо погледнем съперничеството, тъй като това е може би първото нещо, което ще срещнем, докато нашата система расте. Съперничестото измерва ефекта от чакането на опашка за споделени ресурси. </p>

<p>USL дефинира съперничество като коефицент между 0 и 100%.Това показва процента от заявките, които не могат да се изпълнят в паралел и затова се нареждат на опашката за ползването на ддаден сървър.</p>
<p class="br"><br /></p>

<p>На долната диаграма имаме опашка с три бели заявки, които могат да се изпълнят в паралел на който и да е от белите сървъри в системата. Имаме и две сиви заявки, които не могат да се изпълнят на който и да е сървър ами само на сивият.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_20.png" alt="" id="qt_20" /></div>
<p class="br"><br /></p>

<p>С;едователно трите бели заявки се изпълняват в паралел, но двете сиви ще се изпълнят последователно, защото трябва да чакат сивия сървър да се освободи.</p>
<p class="br"><br /></p>

<p>Така първят сървър се явява тясното място в системата.</p>

<p>USL казва, че ако имаме тясно място в системата то съперничеството за този ресурс (сървър) слага таван на нарастването на производителността на системата. Така коефицента на съперничество вече не е 0% ами по-голям.</p>

<p>Това е показано на графиката долу.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_21.png" alt="" id="qt_21" /></div>
<p class="br"><br /></p>
<p class="br"><br /></p>

<p>Нека погледнем сивият и зачертаният триъгълници. И двата представляват добавяне на един и същ брой хора (като разстояние по оста х), но в началото ние получаваме много по-голямо увеличение на производителността (като разстояние по оста у-) за добавените служители, отколкото когато се приближаваме към тавана зададен от коефицента на съперничество в системата.</p>

<p>Нека да вземем пример специалист във дадена организация. Коефицента на съперничестото моделира какво се случва, когато специалистът не делегирате задачи ефективно. Колкото повече оперативни решения трябва да вземе и колкото повече задачи има да свърши, толкова по-висок е коефициентът на съперничество и толкова повече ограничава общата мащабируемост на организацията.</p>
<p class="br"><br /></p>

<p>Затова първият урок е, че е наистина важно да се научим да делегираме ефективно и да избираме внимателно нещата, в които се включваме.</p>
<p class="br"><br /></p>
<p class="centered-text">Съгласуваност</p>
<p class="br"><br /></p>

<p>Нека сега се спрем върху съгласуваността. Съгласуваността е вторият фактор, който не позволява производителността на една ррганизаия да расте линейно с увеличаване броят служители.</p>

<p>Съгласуваността измерва разходите за постигане на съгласие за това какво е правилното нещо, което трябва да се направи.</p>
<p class="br"><br /></p>

<p>Да предположим, че в нашата система със три сървъра освен всичко друго сървърите (служитлите) трябва да постигнат съгласие т.е. Да съгласуват какво да се прави.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_22.png" alt="" id="qt_22" /></div>
<p class="br"><br /></p>

<p>По този начин всеки сървър върши допълнителна работа и може да произведе по-малко заявки за единица време.</p>
<p class="br"><br /></p>

<p>Нека с 𝑁 означим броят на паралелните заявки, пребиваващи в системата, или чакащи на опашка, или обработвани от сървър.</p>

<p>Броят на връзките между всеки две заявки е N(N-1)/2. Тоест ако имаме 7 човека, то максималният брой на връзките между тях е общо 21.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_23.png" alt="" id="qt_23" /></div>
<p class="br"><br /></p>

<p>USL дефинира съгласуваността като коефицент между 0 и 100%.Той показва процента от максималният брой заявки, които се нуждаят от съгласуване между няколко сървъра.</p>

<p>Например амо коефицента на съгласуване е 30%, а бройят на сървърите е 7, то броят на връзките е 7.</p>

<p>В най-лошият случаи, когато коефицента на съгласуване е равен на 100% ще се изисква съгласие между всеки две заявки (заинтересовани страни/хора) в системата. </p>
<p class="br"><br /></p>

<p>При малък брой заинтересовани страни, участващи във всяко решение, времето за постигане на съгласие е малко, но ако N се увеличава (т.е. броят на участниците във всяко решение нараства), то цената за постигане на съгласуваност може да спре увеличението на производителността. В един момент когато добавям още повече хора. това може дори да доведе до намаляване на производителността.</p>
<p class="br"><br /></p>
<div class="ps2"><img src="images/QT_24.png" alt="" id="qt_24" /></div>
<p class="br"><br /></p>

<p>Този резултат определено съответства на нашата интуиция за поведението на по-големите организации. Тъй като организациите стават по-големи, все повече хора участват във вземането на всяко едно решение, и като следствие процеса на вземане на решения спира. Например в една малка организация може да имаме няколко отделни заинтересовани страни. В една голяма организация всяка от тези заинтересовани страни може в действителност да представлява цял отдел, и следователно да е необходимо първо да се постигне съгласие (съгласуваност) в рамките на отдела, преди да може да се сподели мнението. на следващото йерархично ниво.</p>
<p class="br"><br /></p>

<p><span class="emphasis">Това е втория ключов урок: когато организацията расте, трябва да се стреми да сведе до минимум броя на заинтересованите страни, които трябва да бъдат включени при вземането на всяко едно решение.</span></p>
<p class="br"><br /></p>

<p>Тъй като коефициентът на съгласуваност се умножава по N на квадрат, а коефициентът на съперничество се умножава само по N, то ако нашата организация става по-голяма и по-голяма, факторът съгласуваност става по-важният от двата. </p>

<p>Затова трябва съзнателно да проектираме организационните си структури, така че да сведем до минимум разходите за съгласуваност. Ние искаме силна сплотеност в рамките на отделните екипи/отдели и слаба връзка между тях. </p>

<p>Трябва да работим и върху културните очаквания. От културна гледна точка не бихме искали да поощряваме една култура на тайно вземане на решения, но същевременно искаме да ограничим броя на хората, активно частващи във вземането на всяко едно решение.</p>
</div>
<p class="separator"><br /></p>
<div class="sub-headed-section">
<h4 class="sub-heading" id="doc101">СТАБИЛНА СИСТЕМА</h4>

<p>Стабилността е основна концепция в ТМО и представлява основната част от нашият теоретичен анализ. Една системата е стабилна, ако опашките й остават ограничени във времето.</p>

<p>Стабилността на една система зависи от използваните принципи (политика) за оформяне на графика за изпълнение на заявките.Една политика може да стабилизира дадена система, докато друга може да я дестабилизира.</p>
</div>

</body>
</html>
